---
import { ContentArea } from "../components/ContentArea";
import { LikeButton } from "../components/LikeButton";
import { InterestButton } from "../components/InterestButton";
import { WowButton } from "../components/WowButton";
import { Poll } from "../components/Poll";
import { getSiteConfig } from "../lib/supabase";
import "../styles/global.css";

// Get the bumpersticker ID from the environment variable
const bumperstickerId = import.meta.env.BUMPERSTICKER_ID;
console.log("Environment variable BUMPERSTICKER_ID:", bumperstickerId);

// Fetch the site configuration
const config = await getSiteConfig(bumperstickerId);

// Fallback to default config if none found
const defaultConfig = {
	id: "default",
	user_id: "default",
	domain_id: "default",
	title: "Testing Bumper Sticker",
	content: "Bumper Sticker Testing",
	status: "active",
	created_at: new Date().toISOString(),
	updated_at: new Date().toISOString(),
	accepts_likes: true,
	domain: "default",
	theme: "artistic",
	deployment_url: "",
	messages: true,
	seo: true,
	keywords: "test, keywords",
	description: "test description",
	author: "test author",
	likes: 0,
};

const siteConfig = config || defaultConfig;

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<html lang="en">
	{
		(siteConfig.seo && (
			<head>
				<meta name="description" content={siteConfig.description} />
				<meta name="keywords" content={siteConfig.keywords} />
				<meta name="author" content="BumperStickerPages.com" />
				<meta name="robots" content="index, follow" />
				<meta name="googlebot" content="index, follow" />
				<meta name="bingbot" content="index, follow" />
				<meta name="yandexbot" content="index, follow" />
			</head>
		)) || (
			<head>
				<meta name="robots" content="noindex, nofollow" />
			</head>
		)
	}

	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>{siteConfig.title}</title>

	<body class="min-h-screen bg-gray-500">
		<main class="flex flex-col items-center w-full">
			<div class="w-4/5 mt-8">
				<ContentArea client:load config={siteConfig} />
			</div>
			<div
				class="flex items-center justify-center align-top gap-4 mt-8 w-4/5"
			>
				<LikeButton
					client:load
					bumperstickerId={siteConfig.id}
					title="Like"
				/>
				<InterestButton
					client:load
					bumperstickerId={siteConfig.id}
					title="Interesting"
				/>
				<WowButton
					client:load
					bumperstickerId={siteConfig.id}
					title="Wow"
				/>
				<button
					id="toggleComments"
					class="-mt-4 hover:text-red-500 hover:scale-110 transition-all duration-300"
					title="Poll"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						class="h-6 w-6 text-white"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
						></path>
					</svg>
				</button>
			</div>
			<div id="pollForm" class="hidden w-4/5 mt-4">
				<Poll client:load bumperstickerId={siteConfig.id} />
			</div>
		</main>
		<script>
			const toggleButton = document.getElementById("toggleComments");
			const pollForm = document.getElementById("pollForm");

			toggleButton?.addEventListener("click", () => {
				pollForm?.classList.toggle("hidden");
			});
		</script>
	</body>
</html>
