---
import { ContentArea } from "../components/ContentArea";
import { LikeButton } from "../components/LikeButton";
import { InterestButton } from "../components/InterestButton";
import { WowButton } from "../components/WowButton";
import { Poll } from "../components/Poll";
import { getSiteConfig, type SiteConfig } from "../lib/supabase";
import { getPollForBumpersticker } from "../lib/sanity";
import HeadConfiguration from "../components/HeadConfig";
import "../styles/global.css";

// Get the bumpersticker ID from the environment variable
const bumperstickerId = import.meta.env.BUMPERSTICKER_ID;
console.log("Environment variable BUMPERSTICKER_ID:", bumperstickerId);

// Check if bumperstickerId is valid
if (!bumperstickerId || bumperstickerId === "undefined") {
	console.error(
		"BUMPERSTICKER_ID environment variable is not set or invalid",
	);
}

// Fetch the site configuration
const config = await getSiteConfig(bumperstickerId);

// Check if a poll exists for this bumpersticker
console.log("Fetching poll for bumperstickerId:", bumperstickerId);
const poll = await getPollForBumpersticker(bumperstickerId);
console.log("Poll fetch result:", poll);

// Fallback to default config if none found
const defaultConfig: SiteConfig = {
	id: "default",
	user_id: "default",
	domain_id: "default",
	title: "Testing Bumper Sticker",
	superscript: "test superscript",
	content: "BumperSticker Testing",
	status: "active",
	created_at: new Date().toISOString(),
	updated_at: new Date().toISOString(),
	accepts_likes: true,
	domain: "default",
	theme: "artistic",
	deployment_url: "",
	messages: true,
	seo: true,
	aiscrape: true,
	keywords: "test, keywords",
	description: "test description",
	author: "test author",
	likes: 0,
	config: {
		seo: true,
		content: "Default Content",
		heading: "BumperSticker Pages",
		justify: "center",
		leading: "normal",
		bodyText: "Default Body Text",
		fontColor: "#fd0909",
		headingFontColor: "#fd0909",
		bodyFontColor: "#000000",
		fontStyle: "Arial, Helvetica, sans-serif",
		headingFontStyle: "Arial, Helvetica, sans-serif",
		bodyFontStyle: "Arial, Helvetica, sans-serif",
		aiScraping: true,
		borderColor: "#ef0000",
		borderStyle: "accent",
		borderWidth: "1",
		headingText: "Default Heading Text",
		acceptsLikes: true,
		acceptsTerms: true,
		bodyFontSize: "37",
		borderRadius: "47",
		backgroundColor: "#12e027",
		headerAlignment: "center",
		headingFontSize: "49",
	},
};

const siteConfig = config || defaultConfig;

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<html lang="en">
	<head>
		<HeadConfiguration siteConfig={siteConfig} />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{siteConfig.title}</title>
	</head>
	<body class="min-h-screen bg-gray-500">
		<main class="flex flex-col items-center w-full">
			<div class="w-4/5 mt-8">
				<ContentArea client:load config={siteConfig} />
			</div>
			<div
				class="flex items-center justify-center align-top gap-4 mt-8 w-4/5"
			>
				{
					(siteConfig.config?.acceptsLikes ??
						siteConfig.accepts_likes) && (
						<>
							<LikeButton
								client:load
								bumperstickerId={siteConfig.id}
								title="Like"
							/>
							<InterestButton
								client:load
								bumperstickerId={siteConfig.id}
								title="Interesting"
							/>
							<WowButton
								client:load
								bumperstickerId={siteConfig.id}
								title="Wow"
							/>
						</>
					)
				}
			</div>
			{
				poll && (
					<div id="pollForm" class="w-4/5 mt-4 mb-8">
						<Poll client:load bumperstickerId={siteConfig.id} />
					</div>
				)
			}
		</main>
	</body>
</html>
